<?php
    // DBAccess is a class that will handle all processes to connect to the database and execute various queries. 

    // Class Map.

    // PROPERTIES
    // - DSN (represents the database credentials).
    // - username
    // - password
    // - pdo (represents the query strings).

    // METHODS
    // 1. -- construct (will set all the connection details).
    // 2. + connect (connecting to the database). 
    // 3. + disconnect (disconnecting to the database). 
    // 4. + executeSQL (executing queries and returning back data). 
    // 5. + executeSQLSingleValue (executing a query for only a single row or item and returns back that data). 
    // 6. + executeReadWrite (executing statements that can insert, update and delete data as well as return primary key values). 

    class DBAccess {
        // Properties. 
        private $_DSN;
        private $_username;
        private $_password;
        private $_pdo;

        // 1. Use the construct method to set up the connection details. 
        public function __construct($DSN, $username, $password) {
            // Get each property and assign variables. 
            $this->_DSN = $DSN;
            $this->_username = $username;
            $this->_password = $password;
        }
        // 2. A method to connect to the database. 
        public function connect() {
            // Begin try/catch. 
            try {
                // Assign the connection details to the $pdo property. 
                $this->_pdo = new PDO($this->_DSN, $this->_username, $this->_password);
                // Check for errors. 
                $this->_pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            }
            catch(PDOException $e) {
                die("Awwww, the connection failed: " . $e->getMessage());
            }
            return $this->_pdo;
        }
        // 3. A method to disconnect and close the database connection. 
        public function disconnect() {
            $this->_pdo = "";
        }
        // 4. A method to execute a query statement and display the data. 
        public function executeSQL($stmt) {
            // Begin try/catch. 
            try {
                // Use the query method to get the query statement and assign to the $rows object. 
                // Use a placeholder 'stmt' for use in prepare/bind statements. 
                $stmt->execute();
                // Retrieve the query with the 'fetchAll' method.
                $rows = $stmt->fetchAll();
            }
            catch(PDOException $e) {
                die("Oh, OK, the query failed: " . $e->getMessage());
            }
            // Display the data from the query statement. 
            return $rows;
        }
        // 5. A method to only return information on a single item.
        public function executeSQLSingleValue($stmt) {
            // Begin try/catch. 
            try {
                // Execute the query statement assigning it to the $rows object.
                // Use a placeholder 'stmt' for use in prepare/bind statements. 
                $stmt->execute();
                // Get the single item value. 
                $value = $stmt->fetchColumn(); 
            }
            catch(PDOException $e) {
                die("Hey buster! this query failed" . $e->getMessage());
            }
            // Return the data on the single item. 
            return $value;
        }
        // 6. A method to execute statements that can insert, update and delete data as well as return primary key values.
        public function executeReadWrite($stmt, $pkid = false) {
            // Begin try/catch. 
            try {
                // Assign the placeholder 'stmt' to a variable for use in prepare/bind statements. 
                $value = $stmt->execute();
                // Get the primary key ID generated by the database. 
                if($pkid == true) {
                    $value = $this->_pdo->lastInsertId();
                } 
            }
            catch(PDOException $e) {
                die("Dam Bro, this query failed" . $e->getMessage());
            }
            // Return the primary key if it was generated. Otherwise returns true or false. 
            return $value;
        }
    }
?>